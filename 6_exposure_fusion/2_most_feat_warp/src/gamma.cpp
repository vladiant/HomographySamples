#include "gamma.h"

#include <cstdint>

//-----------------------------------------------------------------------------
//-------------------- DEFS ---------------------------------------------------
//-----------------------------------------------------------------------------

/*
uint16_t const_gamma[256] =
{
  0,  4,  8, 12, 15, 18, 21, 24, 26, 29, 32, 34, 36, 38, 41, 43,
 45, 47, 49, 51, 52, 54, 56, 58, 60, 61, 63, 65, 66, 68, 69, 71,
 72, 74, 75, 77, 78, 80, 81, 82, 84, 85, 87, 88, 89, 90, 92, 93,
 94, 96, 97, 98, 99,100,102,103,104,105,106,107,109,110,111,112,
113,114,115,116,117,118,119,121,122,123,124,125,126,127,128,129,
130,131,132,133,134,135,135,136,137,138,139,140,141,142,143,144,
145,146,147,147,148,149,150,151,152,153,154,154,155,156,157,158,
159,160,160,161,162,163,164,164,165,166,167,168,169,169,170,171,
172,172,173,174,175,176,176,177,178,179,179,180,181,182,182,183,
184,185,185,186,187,188,188,189,190,191,191,192,193,193,194,195,
196,196,197,198,198,199,200,200,201,202,202,203,204,205,205,206,
207,207,208,209,209,210,211,211,212,213,213,214,215,215,216,216,
217,218,218,219,220,220,221,222,222,223,224,224,225,225,226,227,
227,228,228,229,230,230,231,232,232,233,233,234,235,235,236,236,
237,238,238,239,239,240,241,241,242,242,243,244,244,245,245,246,
246,247,248,248,249,249,250,250,251,252,252,253,253,254,254,255
};


static void reverse_gamma(uint16_t* gamma_orig, uint16_t* gamma_out)
{
        // Reverse gamma from 256x8-bit to 256x12-bit
        uint16_t* p;
        uint16_t index;
        int16_t step;
        uint16_t counter;
        uint16_t i;

        p = gamma_out;
        counter = 0;

        *p++ = counter;
        counter += 16;

        for(index = 1; index < 256; ++index) {
                step = gamma_orig[index] - gamma_orig[index - 1];
                for(i = 0; i < step; ++i)
                        *p++ = counter + (16*i)/step;

                counter += 16;
        }
}
*/

uint16_t rev_gamma[256] = {
    0,    16,   20,   24,   28,   32,   36,   40,   44,   48,   52,   56,
    60,   64,   69,   74,   80,   85,   90,   96,   101,  106,  112,  117,
    122,  128,  136,  144,  149,  154,  160,  165,  170,  176,  184,  192,
    200,  208,  216,  224,  229,  234,  240,  248,  256,  264,  272,  280,
    288,  296,  304,  312,  320,  336,  344,  352,  360,  368,  376,  384,
    392,  400,  416,  424,  432,  440,  448,  464,  472,  480,  496,  504,
    512,  528,  536,  544,  560,  568,  576,  592,  600,  608,  624,  640,
    648,  656,  672,  680,  688,  704,  720,  736,  744,  752,  768,  784,
    792,  800,  816,  832,  848,  864,  872,  880,  896,  912,  928,  944,
    960,  968,  976,  992,  1008, 1024, 1040, 1056, 1072, 1088, 1104, 1120,
    1136, 1144, 1152, 1168, 1184, 1200, 1216, 1232, 1248, 1264, 1280, 1296,
    1312, 1328, 1344, 1360, 1392, 1408, 1424, 1440, 1456, 1472, 1488, 1504,
    1520, 1536, 1552, 1568, 1600, 1616, 1632, 1648, 1664, 1680, 1696, 1728,
    1744, 1760, 1776, 1792, 1808, 1840, 1856, 1872, 1888, 1920, 1936, 1952,
    1968, 1984, 2016, 2032, 2048, 2080, 2096, 2112, 2128, 2160, 2176, 2192,
    2224, 2240, 2256, 2288, 2304, 2320, 2352, 2368, 2384, 2416, 2432, 2448,
    2480, 2496, 2528, 2544, 2560, 2592, 2608, 2640, 2656, 2688, 2704, 2736,
    2752, 2768, 2800, 2816, 2848, 2864, 2896, 2912, 2944, 2960, 2992, 3008,
    3040, 3072, 3088, 3120, 3136, 3168, 3184, 3216, 3232, 3264, 3296, 3312,
    3344, 3376, 3392, 3424, 3440, 3472, 3504, 3520, 3552, 3584, 3600, 3632,
    3664, 3680, 3712, 3744, 3760, 3792, 3824, 3856, 3872, 3904, 3936, 3968,
    3984, 4016, 4048, 4080};

//-----------------------------------------------------------------------------
//-------------------- routines -----------------------------------------------
//-

void gamma_reverse(unsigned char* src, unsigned char* dst, int width,
                   int height, int ppl_src, int ppl_dst) {
  int x, y;
  for (y = 0; y < height; ++y) {
    for (x = 0; x < width; ++x) {
      int32_t p0;

      p0 = *src++;
      p0 = rev_gamma[p0 & 0xff];
      *dst++ = p0 / 16;
      p0 = *src++;

      p0 = rev_gamma[p0 & 0xff];
      *dst++ = p0 / 16;

      p0 = *src++;
      p0 = rev_gamma[p0 & 0xff];
      *dst++ = p0 / 16;
    }
    src += (ppl_src - width) * 3;
    dst += (ppl_dst - width) * 3;
  }
}

void gamma_reverse_gray(unsigned char* src, unsigned char* dst, int width,
                        int height, int ppl_src, int ppl_dst) {
  int x, y;
  for (y = 0; y < height; ++y) {
    for (x = 0; x < width; ++x) {
      int32_t p0 = *src++;
      p0 = rev_gamma[p0 & 0xff];
      *dst++ = p0 / 16;
    }
    src += (ppl_src - width) * 1;
    dst += (ppl_dst - width) * 1;
  }
}

void rgb24_to_gray_gamma_reverse(unsigned char* src, unsigned char* dst,
                                 int width, int height, int ppl_src,
                                 int ppl_dst) {
  int x, y;
  for (y = 0; y < height; ++y) {
    for (x = 0; x < width; ++x) {
      int32_t p0 = (0.299 * rev_gamma[(*src++) & 0xff] +
                    0.587 * rev_gamma[(*src++) & 0xff] +
                    0.114 * rev_gamma[(*src++) & 0xff]);
      *dst++ = p0 / 16;
    }
    src += (ppl_src - width) * 3;
    dst += (ppl_dst - width) * 1;
  }
}
